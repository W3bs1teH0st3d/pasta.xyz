const { Client, IntentsBitField, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  'https://ypfoeackdeyzkmrkytwz.supabase.co',
  process.env.SUPABASE_SERVICE_KEY
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent,
  ],
});

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => id.trim()) : [];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
function generateKey(isHwidKey = false) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let key = '';
  const length = isHwidKey ? 8 : 16;
  for (let i = 0; i < length; i++) {
    key += characters.charAt(Math.floor(Math.random() * characters.length));
    if (isHwidKey && i === 3) key += '-';
    else if (!isHwidKey && i % 4 === 3 && i < 15) key += '-';
  }
  return key;
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
async function sha256(str) {
  const msgBuffer = new TextEncoder().encode(str);
  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ embed
function createEmbed(title, description, color = '#8a00d4') {
  return new EmbedBuilder()
    .setTitle(title)
    .setDescription(description)
    .setColor(color)
    .setTimestamp()
    .setFooter({ text: 'Pasta.xyz KeyGen', iconURL: client.user.displayAvatarURL() });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
client.once('ready', () => {
  console.log(`üöÄ –ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤!`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
client.on('messageCreate', async (message) => {
  if (message.author.bot || !message.content.startsWith('!')) return;

  const args = message.content.slice(1).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'generatekey') {
    if (!adminIds.includes(message.author.id)) {
      return message.reply({
        embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ç—å –∫–ª—é—á–∏!', '#e63946')],
        ephemeral: true,
      });
    }

    const typeMenu = new StringSelectMenuBuilder()
      .setCustomId('key_type')
      .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞')
      .addOptions(
        { label: '–û–±—ã—á–Ω—ã–π –∫–ª—é—á', value: 'key' },
        { label: 'HWID –∫–ª—é—á', value: 'hwid' }
      );

    const row = new ActionRowBuilder().addComponents(typeMenu);

    await message.reply({
      embeds: [createEmbed('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞:\n–¢–∏–ø: –ù–µ –≤—ã–±—Ä–∞–Ω–æ')],
      components: [row],
      ephemeral: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isStringSelectMenu() && !interaction.isButton()) return;

  if (!adminIds.includes(interaction.user.id)) {
    return interaction.reply({
      embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å!', '#e63946')],
      ephemeral: true,
    });
  }

  let embed = EmbedBuilder.from(interaction.message.embeds[0]);
  let currentDescription = embed.data.description || '';

  if (interaction.isStringSelectMenu()) {
    const { customId, values } = interaction;
    const value = values[0];

    console.log(`[DEBUG] –í—ã–±—Ä–∞–Ω–æ: customId=${customId}, value=${value}`);

    if (customId === 'key_type') {
      let components = [];
      if (value === 'key') {
        const accessMenu = new StringSelectMenuBuilder()
          .setCustomId('access_level')
          .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞')
          .addOptions(
            { label: '–£—Ä–æ–≤–µ–Ω—å 1', value: '1' },
            { label: '–£—Ä–æ–≤–µ–Ω—å 2', value: '2' },
            { label: '–£—Ä–æ–≤–µ–Ω—å 3', value: '3' }
          );

        const limitMenu = new StringSelectMenuBuilder()
          .setCustomId('activation_limit')
          .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π')
          .addOptions(
            { label: '1 –∞–∫—Ç–∏–≤–∞—Ü–∏—è', value: '1' },
            { label: '5 –∞–∫—Ç–∏–≤–∞—Ü–∏–π', value: '5' },
            { label: '10 –∞–∫—Ç–∏–≤–∞—Ü–∏–π', value: '10' }
          );

        const daysMenu = new StringSelectMenuBuilder()
          .setCustomId('days_valid')
          .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è')
          .addOptions(
            { label: '7 –¥–Ω–µ–π', value: '7' },
            { label: '14 –¥–Ω–µ–π', value: '14' },
            { label: '30 –¥–Ω–µ–π', value: '30' }
          );

        const generateButton = new ButtonBuilder()
          .setCustomId('generate_key')
          .setLabel('üéÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
          .setStyle(ButtonStyle.Success);

        components = [
          new ActionRowBuilder().addComponents(accessMenu),
          new ActionRowBuilder().addComponents(limitMenu),
          new ActionRowBuilder().addComponents(daysMenu),
          new ActionRowBuilder().addComponents(generateButton),
        ];
        currentDescription = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª—é—á–∞:\n–¢–∏–ø: –û–±—ã—á–Ω—ã–π\n–£—Ä–æ–≤–µ–Ω—å: –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n–ê–∫—Ç–∏–≤–∞—Ü–∏–∏: –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n–°—Ä–æ–∫: –ù–µ –≤—ã–±—Ä–∞–Ω–æ';
      } else if (value === 'hwid') {
        const daysMenu = new StringSelectMenuBuilder()
          .setCustomId('days_valid_hwid')
          .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è')
          .addOptions(
            { label: '7 –¥–Ω–µ–π', value: '7' },
            { label: '14 –¥–Ω–µ–π', value: '14' },
            { label: '30 –¥–Ω–µ–π', value: '30' }
          );

        const generateButton = new ButtonBuilder()
          .setCustomId('generate_hwid')
          .setLabel('üéÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HWID –∫–ª—é—á')
          .setStyle(ButtonStyle.Success);

        components = [
          new ActionRowBuilder().addComponents(daysMenu),
          new ActionRowBuilder().addComponents(generateButton),
        ];
        currentDescription = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª—é—á–∞:\n–¢–∏–ø: HWID\n–°—Ä–æ–∫: –ù–µ –≤—ã–±—Ä–∞–Ω–æ';
      }

      embed.setDescription(currentDescription);
      await interaction.update({ embeds: [embed], components, ephemeral: true });
    } else if (customId === 'access_level' || customId === 'activation_limit' || customId === 'days_valid' || customId === 'days_valid_hwid') {
      let lines = currentDescription.split('\n');
      if (customId === 'access_level') {
        lines[2] = `–£—Ä–æ–≤–µ–Ω—å: ${value}`;
      } else if (customId === 'activation_limit') {
        lines[3] = `–ê–∫—Ç–∏–≤–∞—Ü–∏–∏: ${value}`;
      } else if (customId === 'days_valid') {
        lines[4] = `–°—Ä–æ–∫: ${value} –¥–Ω–µ–π`;
      } else if (customId === 'days_valid_hwid') {
        lines[2] = `–°—Ä–æ–∫: ${value} –¥–Ω–µ–π`;
      }

      currentDescription = lines.join('\n');
      console.log(`[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentDescription}`);

      embed.setDescription(currentDescription);
      await interaction.update({ embeds: [embed], components: interaction.message.components, ephemeral: true });
    }
  } else if (interaction.isButton()) {
    console.log(`[DEBUG] –ö–Ω–æ–ø–∫–∞: ${interaction.customId}, –¢–µ–∫—Å—Ç: ${currentDescription}`);

    if (interaction.customId === 'generate_key') {
      const accessLevelMatch = currentDescription.match(/–£—Ä–æ–≤–µ–Ω—å: (\d+)/);
      const activationLimitMatch = currentDescription.match(/–ê–∫—Ç–∏–≤–∞—Ü–∏–∏: (\d+)/);
      const daysValidMatch = currentDescription.match(/–°—Ä–æ–∫: (\d+) –¥–Ω–µ–π/);

      const accessLevel = accessLevelMatch ? parseInt(accessLevelMatch[1]) : null;
      const activationLimit = activationLimitMatch ? parseInt(activationLimitMatch[1]) : null;
      const daysValid = daysValidMatch ? parseInt(daysValidMatch[1]) : null;

      if (!accessLevel || !activationLimit || !daysValid) {
        return interaction.update({
          embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É—Ä–æ–≤–µ–Ω—å, –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —Å—Ä–æ–∫)!', '#e63946')],
          components: interaction.message.components,
          ephemeral: true,
        });
      }

      await generateAndSaveKey(interaction, accessLevel, activationLimit, daysValid, false);
    } else if (interaction.customId === 'generate_hwid') {
      const daysValidMatch = currentDescription.match(/–°—Ä–æ–∫: (\d+) –¥–Ω–µ–π/);
      const daysValid = daysValidMatch ? parseInt(daysValidMatch[1]) : null;

      if (!daysValid) {
        return interaction.update({
          embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è!', '#e63946')],
          components: interaction.message.components,
          ephemeral: true,
        });
      }

      await generateAndSaveKey(interaction, null, 1, daysValid, true);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞
async function generateAndSaveKey(interaction, accessLevel, activationLimit, daysValid, isHwidKey) {
  const expiresAt = new Date(Date.now() + daysValid * 24 * 60 * 60 * 1000).toISOString();

  try {
    const key = generateKey(isHwidKey);
    const keyHash = await sha256(key);

    const table = isHwidKey ? 'hwid_reset_keys' : 'keyz';
    const keyData = {
      key_hash: keyHash,
      activation_limit: activationLimit,
      activation_count: 0,
      expires_at: expiresAt,
      status: 'active',
      created_at: new Date().toISOString(),
    };
    if (!isHwidKey) {
      keyData.access_level = accessLevel;
    }

    console.log(`[DEBUG] –ö–ª—é—á: ${key}, –•—ç—à: ${keyHash}, –î–∞–Ω–Ω—ã–µ:`, keyData);

    const { error } = await supabase.from(table).insert([keyData]);

    if (error) {
      console.error('[ERROR] Supabase:', JSON.stringify(error, null, 2));
      return interaction.update({
        embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, '#e63946')],
        components: [],
        ephemeral: true,
      });
    }

    const title = isHwidKey ? 'üîë HWID –∫–ª—é—á –≥–æ—Ç–æ–≤!' : 'üîë –ö–ª—é—á –≥–æ—Ç–æ–≤!';
    const description = isHwidKey
      ? `**–ö–ª—é—á**: \`${key}\`\n**–õ–∏–º–∏—Ç**: ${activationLimit}\n**–ò—Å—Ç–µ–∫–∞–µ—Ç**: ${expiresAt}`
      : `**–ö–ª—é—á**: \`${key}\`\n**–£—Ä–æ–≤–µ–Ω—å**: ${accessLevel}\n**–õ–∏–º–∏—Ç**: ${activationLimit}\n**–ò—Å—Ç–µ–∫–∞–µ—Ç**: ${expiresAt}`;
    const embed = createEmbed(title, description);
    await interaction.update({ embeds: [embed], components: [], ephemeral: true });
  } catch (err) {
    console.error('[ERROR] –°–µ—Ä–≤–µ—Ä:', err.message, err.stack);
    await interaction.update({
      embeds: [createEmbed('‚õî –û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!', '#e63946')],
      components: [],
      ephemeral: true,
    });
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(process.env.DISCORD_TOKEN);